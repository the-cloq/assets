const vertexShader="\n      uniform float uTime;\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        float displacement = sin(position.x * 5.0 + uTime) * 0.05\n                           + sin(position.y * 7.0 + uTime * 1.5) * 0.03\n                           + sin(position.z * 6.0 + uTime * 2.0) * 0.04;\n        vec3 newPos = position + normal * displacement;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(newPos, 1.0);\n      }\n    ",fragmentShader="\n      varying vec2 vUv;\n      uniform sampler2D uGradient;\n      uniform float uOpacity;\n      void main() {\n        vec4 texColor = texture2D(uGradient, vUv);\n        gl_FragColor = vec4(texColor.rgb, texColor.a * uOpacity);\n      }\n    ",scene=new THREE.Scene,camera=new THREE.PerspectiveCamera(50,1,.1,100);camera.position.z=3;const renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0});function createGradientTexture(e,n){const a=256,r=document.createElement("canvas");r.width=r.height=a;const t=r.getContext("2d"),i=t.createRadialGradient(128,128,25.6,128,128,128);return i.addColorStop(0,e),i.addColorStop(1,n),t.fillStyle=i,t.fillRect(0,0,a,a),new THREE.CanvasTexture(r)}renderer.setSize(70,70),document.getElementById("globeContainer").appendChild(renderer.domElement);const layers=[],colors=[["#7b2ff7","#f107a3"],["#0ff","#08f"],["#a0eaff","#00416a"]];function animate(e=0){e*=.001,layers.forEach(((n,a)=>{n.material.uniforms.uTime.value=e,n.rotation.y=e*(.1+.05*a),n.rotation.x=e*(.05+.03*a)})),renderer.render(scene,camera),requestAnimationFrame(animate)}colors.forEach(((e,n)=>{const a={uTime:{value:0},uGradient:{value:createGradientTexture(e[0],e[1])},uOpacity:{value:.15+.1*n}},r=new THREE.ShaderMaterial({vertexShader:vertexShader,fragmentShader:fragmentShader,uniforms:a,transparent:!0,depthWrite:!1,blending:THREE.AdditiveBlending,side:THREE.DoubleSide}),t=new THREE.SphereGeometry(1-.1*n,64,64),i=new THREE.Mesh(t,r);layers.push(i),scene.add(i)})),animate(),window.addEventListener("resize",(()=>{renderer.setSize(70,70),camera.aspect=1,camera.updateProjectionMatrix()}));
